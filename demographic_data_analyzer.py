# -*- coding: utf-8 -*-
"""Demographic Data Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DwmywH3NUzLjf8hfR1BMqRjhaxTHpmLV
"""

import pandas as pd


def calculate_demographic_data(print_data=True):
    # Read data from file
    df = pd.read_csv('adult.data.csv')

    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df['race'].value_counts()

    # What is the average age of men?
    average_age_men = df.groupby('sex').get_group('Male')['age'].mean().round(decimals=1)

    # What is the percentage of people who have a Bachelor's degree?
    percentage_bachelors =((df['education'].value_counts(normalize=True)['Bachelors'])*100).round(decimals=1)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?

    # with and without `Bachelors`, `Masters`, or `Doctorate`
    higher_education = df[df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]
    lower_education = df[~df['education'].isin(['Bachelors', 'Masters', 'Doctorate'])]

    # percentage with salary >50K
    higher_education_rich = round((higher_education[higher_education['salary'] == '>50K'].shape[0] / higher_education.shape[0]) * 100, 1)
    lower_education_rich = round((lower_education[lower_education['salary'] == '>50K'].shape[0] / lower_education.shape[0]) * 100, 1)

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = df['hours-per-week'].min()

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    num_min_workers = None


    rich_percentage = (df[df['hours-per-week']==1]['salary'].value_counts(normalize=True)['>50K'])*100

    # What country has the highest percentage of people that earn >50K?
    native_country=df['native-country'].unique().tolist()
    dic={}
    dic1={}
    for i in native_country:
      dic[i]=(df[(df['native-country']==i)&(df['salary']=='>50K')].shape[0])
      dic1[i]=df[(df['native-country']==i)].shape[0]

    # Convert the dictionary into a DataFrame
    df_result = pd.DataFrame(list(dic.items()), columns=['Country', 'more_than_50k'])
    df_result['num_people_each_country']=df_result['Country'].map(dic1)
    df_result
    df_result['percent_people_earning_more_than_50k_in_each_country']=(df_result['more_than_50k']/df_result['num_people_each_country'])*100
    df_result.set_index('Country',inplace=True)
    highest_earning_country = df_result['percent_people_earning_more_than_50k_in_each_country'].idxmax()
    highest_earning_country_percentage = round(df_result['percent_people_earning_more_than_50k_in_each_country'].max(),1)

    # Identify the most popular occupation for those who earn >50K in India.
    top_IN_occupation = df.groupby('salary').get_group('>50K')[((df.groupby('salary').get_group('>50K')['native-country'])=='India')]['occupation'].value_counts().idxmax()

    # DO NOT MODIFY BELOW THIS LINE

    if print_data:
        print("Number of each race:\n", race_count)
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }